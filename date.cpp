#include "date.h"
const int Date::days[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};     /*一年中每个月的月份                           */
/*****************************************************************************************************************/
/************类的友元函数定义 ***************************************************************************************/
/*****************************************************************************************************************/

ostream &operator<<(ostream &out, const Date &date)
{
    out<<date.month_<<"-"<<date.day_<<"-"<<date.year_<<endl;

    return out;
}

/*****************************************************************************************************************/
/************公有成员函数定义 ***************************************************************************************/
/*****************************************************************************************************************/



Date::Date(int m, int d, int y)
{
    setDate(m,d,y);
}

Date::~Date()
{

}
/*************为年月日赋值y,m,d,并对输入的值进行检查***********************/
void Date::setDate(int m, int d, int y)
{
    month_=(m>0&&m<=12)? m:1;                                        /*如果输入月份有误,则默认成1                    */
    year_ =(y>=1900&&y<=2100)? y:1900;                               /*如果输入年份有误,则默认成1900                 */

    if(m==2&&isLeapYear(y))
    {
        day_=(d>=1&&d<=29)? d:1;                                     /*如果输入日期有误,则默认成1                    */
    }
    else
    {
        day_=(d>=1&&d<=days[m])? d:1;

    }

}
/************判断输入年份y是否为闰年************************************/
bool Date::isLeapYear(int y)
{
    if(y%400==0||(y%100!=0&&y%4==0))
         return true;
    else
         return false;

}
/************重载先增一运算符******************************************/
Date &Date::operator++()
{
    helpIncrement();
    return *this;
}
/************重载后增一运算符******************************************/
Date Date::operator++(int)
{
    Date temp =*this;
    helpIncrement();

    return temp;
}
/************为日期增加d天*******************************************/
const Date &Date::operator+=(int d)
{
    int i;
    for(i=1;i<=d;++i)
    {
        helpIncrement();
    }

    return *this;
}
/************判断是否为一个月最后一天 **********************************/
bool Date::isEndOfmonth(int d) const
{
    if(month_==2&&isLeapYear(year_))
    {
        return d==29;
    }
    else
    {
        return d==days[month_];

    }


}

/*****************************************************************************************************************/
/************私有成员函数定义 ***************************************************************************************/
/*****************************************************************************************************************/

/************为日期累加一天*******************************************/
void Date::helpIncrement()
{
    if(!isEndOfmonth(day_))                                         /*考虑是否为每月的最后一天                       */
    {
        ++day_;
    }
    else if(month_<12)
    {
        ++month_;
        day_  =1;
    }
    else
    {
        ++year_;
        month_=1;
        day_  =1;
    }



}

